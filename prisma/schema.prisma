generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Candidate {
  id                       String          @id @default(uuid())
  email                    String          @unique
  password                 String
  firstName                String?
  lastName                 String?
  phone                    String?
  description              String?
  githubUrl                String?
  portfolioUrl             String?
  fileName                 String?
  fileUrl                  String?
  resetPasswordToken       String?         @unique
  resetPasswordTokenExpiry DateTime?
  applications             Application[]
  favoriteOffers           FavoriteOffer[]
}

model Employer {
  id                       String    @id @default(uuid())
  email                    String    @unique
  password                 String
  companyName              String?
  city                     String?
  address                  String?
  description              String?   @db.VarChar(500)
  phone                    String?
  website                  String?
  logoName                 String?
  logoUrl                  String?
  resetPasswordToken       String?   @unique
  resetPasswordTokenExpiry DateTime?
  Offer                    Offer[]
}

model Offer {
  id              String          @id @default(uuid())
  title           String
  description     String          @db.Text
  city            String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  employerId      String
  employer        Employer        @relation(fields: [employerId], references: [id])
  experienceId    Int
  experience      Experience      @relation(fields: [experienceId], references: [id])
  typeOfWorkId    Int
  typeOfWork      TypeOfWork      @relation(fields: [typeOfWorkId], references: [id])
  operatingModeId Int
  operatingMode   OperatingMode   @relation(fields: [operatingModeId], references: [id])
  mustHaveTech    Technology[]    @relation("mustHaveTech")
  niceToHaveTech  Technology[]    @relation("niceToHaveTech")
  applications    Application[]
  isOpen          Boolean         @default(true)
  favoritedBy     FavoriteOffer[]
  salaryRanges    SalaryRange[]

  @@index([experienceId])
  @@index([typeOfWorkId])
  @@index([operatingModeId])
  @@index([employerId])
}

model Experience {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  offers Offer[]
}

model TypeOfWork {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  offers Offer[]
}

model OperatingMode {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  offers Offer[]
}

model Technology {
  id               Int     @id @default(autoincrement())
  name             String  @unique
  offersMustHave   Offer[] @relation("mustHaveTech")
  offersNiceToHave Offer[] @relation("niceToHaveTech")
}

model Application {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  offerId     String
  offer       Offer     @relation(fields: [offerId], references: [id])

  candidateFirstName    String?
  candidateLastName     String?
  candidatePhone        String?
  candidateDescription  String?
  candidateGithubUrl    String?
  candidatePortfolioUrl String?
  candidateFileName     String?
  candidateFileUrl      String?

  @@index([candidateId])
  @@index([offerId])
}

model FavoriteOffer {
  candidateId String
  offerId     String

  candidate Candidate @relation(fields: [candidateId], references: [id])
  offer     Offer     @relation(fields: [offerId], references: [id])

  @@id([candidateId, offerId])
  @@index([candidateId])
  @@index([offerId])
}

model ContractType {
  id       Int           @id @default(autoincrement())
  name     String        @unique
  salaries SalaryRange[]
}

model SalaryRange {
  id             Int          @id @default(autoincrement())
  salaryFrom     Int
  salaryTo       Int
  contractTypeId Int
  contractType   ContractType @relation(fields: [contractTypeId], references: [id])
  offers         Offer[]

  @@index([contractTypeId])
}
